<!DOCTYPE html>
<html lang="en">

<head>

    <title>Project1</title>
</head>

<body>
    <script>
        // Setup IndexedDB without recreating it on rerun
        function setupIndexedDB(dbName, callback) {
            let request = indexedDB.open(dbName, 1);

            request.onupgradeneeded = function (event) {
                let db = event.target.result;

                // Create object store with 'task', 'status', 'dueDate' and index on 'status'
                if (!db.objectStoreNames.contains("TodoList")) {
                    let objectStore = db.createObjectStore("TodoList", { keyPath: "id" });
                    objectStore.createIndex("status", "status", { unique: false });
                }

                // Create TodoListCompleted store
                if (!db.objectStoreNames.contains("TodoListCompleted")) {
                    db.createObjectStore("TodoListCompleted", { keyPath: "id" });
                }
            };

            request.onsuccess = function (event) {
                let db = event.target.result;
                callback(db);
            };

            request.onerror = function (event) {
                console.error("Error opening IndexedDB:", event);
            };
        }

        // Function to add 100k objects to the 'TodoList' store only if they don't already exist
        function add100kObjects(db, callback) {
            let transaction = db.transaction("TodoList", "readonly");
            let objectStore = transaction.objectStore("TodoList");
            let countRequest = objectStore.count();

            countRequest.onsuccess = function () {
                if (countRequest.result === 0) {
                    let writeTransaction = db.transaction("TodoList", "readwrite");
                    let writeObjectStore = writeTransaction.objectStore("TodoList");

                    for (let i = 0; i < 100000; i++) {
                        let status = i < 1000 ? "completed" : "in progress";
                        let task = `Task_${i}`;
                        let dueDate = new Date().toISOString().split("T")[0];
                        let object = { id: i, task, status, dueDate };
                        writeObjectStore.add(object);
                    }

                    writeTransaction.oncomplete = function () {
                        console.log("100k TodoList objects added.");
                        callback();
                    };

                    writeTransaction.onerror = function (event) {
                        console.error("Error adding objects:", event);
                    };
                } else {
                    console.log("Objects already exist, skipping insertion.");
                    callback();
                }
            };

            countRequest.onerror = function (event) {
                console.error("Error counting objects:", event);
            };
        }

        // Function f1: Reading completed tasks from TodoList
        function f1(db, callback) {
            let transaction = db.transaction("TodoList", "readonly");
            let objectStore = transaction.objectStore("TodoList");
            let index = objectStore.index("status");
            let count = 0;

            let request = index.openCursor("completed");
            request.onsuccess = function (event) {
                let cursor = event.target.result;
                if (cursor) {
                    count++;
                    cursor.continue();
                } else {
                    callback(count);
                }
            };
        }

        // Function f2: Reading completed tasks with 'readonly' flag
        function f2(db, callback) {
            let transaction = db.transaction("TodoList", "readonly");
            let objectStore = transaction.objectStore("TodoList");
            let index = objectStore.index("status");
            let count = 0;

            let request = index.openCursor("completed");
            request.onsuccess = function (event) {
                let cursor = event.target.result;
                if (cursor) {
                    count++;
                    cursor.continue();
                } else {
                    callback(count);
                }
            };
        }

        // Function f3: Moving completed tasks to a new store
        function f3(db, callback) {
            let transaction = db.transaction(["TodoList", "TodoListCompleted"], "readwrite");
            let oldStore = transaction.objectStore("TodoList");
            let newStore = transaction.objectStore("TodoListCompleted");
            let index = oldStore.index("status");
            let count = 0;

            let request = index.openCursor("completed");
            request.onsuccess = function (event) {
                let cursor = event.target.result;
                if (cursor) {
                    newStore.add(cursor.value);
                    count++;
                    cursor.continue();
                } else {
                    callback();
                }
            };
        }

        // Function to measure performance of each operation
        function measurePerformance() {
            const dbName = "Project1";

            setupIndexedDB(dbName, function (db) {
                add100kObjects(db, function () {
                    const performanceResults = [];

                    // Measure f1: Reading completed tasks from 'TodoList'
                    let start = performance.now();
                    f1(db, function (count) {
                        let end = performance.now();
                        performanceResults.push({
                            Operation: "f1 (Read completed tasks from TodoList)",
                            TimeTaken_Ms: (end - start).toFixed(2),

                        });

                        // Measure f2: Reading completed tasks with 'readonly' flag
                        start = performance.now();
                        f2(db, function (count) {
                            end = performance.now();
                            performanceResults.push({
                                Operation: "f2 (Readonly read of completed tasks)",
                                TimeTaken_Ms: (end - start).toFixed(2),

                            });

                            // Measure f3: Moving completed tasks to 'TodoListCompleted' store
                            f3(db, function () {
                                start = performance.now();
                                let transaction = db.transaction(["TodoListCompleted"], "readwrite");
                                let objectStore = transaction.objectStore("TodoListCompleted");
                                let objects=objectStore.getAll();
                                console.log(objects);
                                end = performance.now();
                                performanceResults.push({
                                    Operation: "f3 (Move completed tasks to TodoListCompleted)",
                                    TimeTaken_Ms: (end - start).toFixed(2),

                                });

                                console.table(performanceResults);
                            });
                        });
                    });
                });
            });
        }

        // Call the function to measure and display performance
        measurePerformance();
    </script>
</body>

</html>
