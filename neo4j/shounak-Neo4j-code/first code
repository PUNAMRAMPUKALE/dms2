const neo4j = require('neo4j-driver');

// Initialize the Neo4j driver
const driver = neo4j.driver('neo4j+s://184d26be.databases.neo4j.io', neo4j.auth.basic('shounakpalnitkar1999@gmail.com', 'SHSP1236#'));

async function createPatients() {
    const session = driver.session();

    try {
        const createPatientsQuery = `
            CALL apoc.periodic.iterate(
                'UNWIND range(1, 900000) AS id RETURN id',
                'CREATE (:Patient {
                    id: id, 
                    name: 'Patient_' + id, 
                    age: toInteger(rand() * 100), 
                    bloodPressure: toInteger(rand() * 100 + 90), 
                    creatinineLevel: rand() * 2 + 0.5, 
                    hasDiabetes: rand() < 0.2, 
                    hasHypertension: rand() < 0.3, 
                    riskScore: rand() * 100
                })',
                {batchSize: 10000, parallel: true}
            )
        `;
        await session.run(createPatientsQuery);
        console.log('Patients created successfully.');
    } finally {
        await session.close();
    }
}

async function createRelationships() {
    await createSimilarRiskRelationships();
    await createDiabetesRelationships();
    await createHypertensionRelationships();
    await createSimilarAgeRelationships();
    await createDiabetesHypertensionAgeRelationships(); // New relationship method
}

async function createSimilarRiskRelationships() {
    const session = driver.session();

    try {
        const similarRiskQuery = `
            CALL apoc.periodic.iterate(
                'MATCH (p1:Patient), (p2:Patient) 
                 WHERE id(p1) <> id(p2) AND abs(p1.riskScore - p2.riskScore) < 10 
                 RETURN p1, p2 LIMIT 10000',
                'CREATE (p1)-[:SIMILAR_RISK]->(p2)',
                {batchSize: 100, parallel: false}
            )
        `;
        await session.run(similarRiskQuery);
        console.log('Similar risk relationships created successfully.');
    } finally {
        await session.close();
    }
}

async function createDiabetesRelationships() {
    const session = driver.session();

    try {
        const diabetesQuery = `
            CALL apoc.periodic.iterate(
                'MATCH (p1:Patient), (p2:Patient) 
                 WHERE id(p1) <> id(p2) AND p1.hasDiabetes = true AND p2.hasDiabetes = true 
                 RETURN p1, p2 LIMIT 10000',
                'CREATE (p1)-[:HAS_SIMILAR_CONDITION {condition: 'Diabetes'}]->(p2)',
                {batchSize: 100, parallel: false}
            )
        `;
        await session.run(diabetesQuery);
        console.log('Diabetes relationships created successfully.');
    } finally {
        await session.close();
    }
}

async function createHypertensionRelationships() {
    const session = driver.session();

    try {
        const hypertensionQuery = `
            CALL apoc.periodic.iterate(
                'MATCH (p1:Patient), (p2:Patient) 
                 WHERE id(p1) <> id(p2) AND p1.hasHypertension = true AND p2.hasHypertension = true 
                 RETURN p1, p2 LIMIT 10000',
                'CREATE (p1)-[:HAS_SIMILAR_CONDITION {condition: 'Hypertension'}]->(p2)',
                {batchSize: 100, parallel: false}
            )
        `;
        await session.run(hypertensionQuery);
        console.log('Hypertension relationships created successfully.');
    } finally {
        await session.close();
    }
}

async function createSimilarAgeRelationships() {
    const session = driver.session();

    try {
        const similarAgeQuery = `
            CALL apoc.periodic.iterate(
                'MATCH (p1:Patient), (p2:Patient) 
                 WHERE id(p1) <> id(p2) AND abs(p1.age - p2.age) < 5 
                 RETURN p1, p2 LIMIT 10000',
                'CREATE (p1)-[:SIMILAR_AGE]->(p2)',
                {batchSize: 100, parallel: false}
            )
        `;
        await session.run(similarAgeQuery);
        console.log('Similar age relationships created successfully.');
    } finally {
        await session.close();
    }
}

// New method to create relationships for patients with both conditions below the specified age
async function createDiabetesHypertensionAgeRelationships() {
    const session = driver.session();

    try {
        const diabetesHypertensionAgeQuery = `
            CALL apoc.periodic.iterate(
                'MATCH (p1:Patient), (p2:Patient) 
                 WHERE id(p1) <> id(p2) AND p1.hasDiabetes = true AND p1.hasHypertension = true 
                 AND p1.age < 40 AND p2.age < 40 
                 RETURN p1, p2 LIMIT 10000',
                'CREATE (p1)-[:HAS_BOTH_CONDITIONS {condition: 'Diabetes and Hypertension'}]->(p2)',
                {batchSize: 100, parallel: false}
            )
        `;
        await session.run(diabetesHypertensionAgeQuery);
        console.log('Relationships for patients with both conditions created successfully.');
    } finally {
        await session.close();
    }
}

async function checkCounts() {
    const session = driver.session();

    try {
        // Check total Patient nodes
        const totalPatientsResult = await session.run('MATCH (p:Patient) RETURN count(p) AS totalPatients');
        const totalPatients = totalPatientsResult.records[0].get('totalPatients').toInt();
        console.log('Total Patients: ' + totalPatients);

        // Check total relationships
        const totalRelationshipsResult = await session.run('MATCH ()-[r]->() RETURN count(r) AS totalRelationships');
        const totalRelationships = totalRelationshipsResult.records[0].get('totalRelationships').toInt();
        console.log('Total Relationships: ' + totalRelationships);
    } finally {
        await session.close();
    }
}

// Main execution
async function main() {
    await createPatients();
    await createRelationships();
    await checkCounts();

    // Close the driver connection
    await driver.close();
}

// Run the main function
main().catch(error => console.error('Error: ', error));


