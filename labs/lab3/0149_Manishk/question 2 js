// Function to generate a unique identifier (UUID)
function generateUUID() {
    return ([1e7]+-1e3+-4e3+-8e3+-1e11).replace(/[018]/g, c =>
        (c ^ crypto.getRandomValues(new Uint8Array(1))[0] & 15 >> c / 4).toString(16)
    );
}

// Open IndexedDB
let db;
const request = indexedDB.open("ObjectDatabase", 1);

request.onupgradeneeded = (event) => {
    db = event.target.result;
    const objectStore = db.createObjectStore("objects", { keyPath: "uuid" });
    objectStore.createIndex("source", "source", { unique: false });
    objectStore.createIndex("created_at", "created_at", { unique: false });
    objectStore.createIndex("updated_at", "updated_at", { unique: false });
    objectStore.createIndex("name", "name", { unique: false });
    objectStore.createIndex("status", "status", { unique: false });
    objectStore.createIndex("value", "value", { unique: false });
};

request.onsuccess = (event) => {
    db = event.target.result;
};

request.onerror = (event) => {
    document.getElementById("status").textContent = "Error opening database.";
    console.error("IndexedDB error:", event.target.errorCode);
};

// Function to generate and store objects in IndexedDB
function generateAndStoreObjects() {
    if (!db) {
        document.getElementById("status").textContent = "Database not initialized yet.";
        return;
    }

    const transaction = db.transaction("objects", "readwrite");
    const objectStore = transaction.objectStore("objects");

    for (let i = 0; i < 1000; i++) {
        const obj = {
            uuid: generateUUID(),
            source: "IndexedDB",
            created_at: new Date().toISOString(),
            updated_at: new Date().toISOString(),
            name: `Name_${i}`,
            status: "active",
            value: Math.floor(Math.random() * 1000) / 10 // Example: random number between 0-99.9
        };

        objectStore.add(obj);
    }

    transaction.oncomplete = () => {
        document.getElementById("status").textContent = "1000 objects have been stored in IndexedDB.";
    };

    transaction.onerror = (event) => {
        document.getElementById("status").textContent = "Error storing objects.";
        console.error("Transaction error:", event.target.errorCode);
    };
}
